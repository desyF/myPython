# Python II - Week 6
# Mini-project #6 - Blackjack

import simplegui
import random

# load card sprite - 936x384 - source: jfitz.com
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
score = 0

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self):
        # create Hand object
        self.hand = []

    def __str__(self):
        # return a string representation of a hand
        hand_str = ''
        for i in self.hand:
            hand_str += str(i)
        return hand_str

    def add_card(self, card):
        # add a card object to a hand
        self.hand.append(card)

    def get_value(self):
        # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
        # compute the value of the hand, see Blackjack video
        hand_value = 0
        aces = 0
        for i in self.hand:
            if i.get_rank() == 'A':
                aces += 1
            hand_value += VALUES.get(i.get_rank())
        if (aces > 0) and ((hand_value + 10) <= 21):
            hand_value += 10
        return hand_value           
   
    def draw(self, canvas, pos):
        # draw a hand on the canvas, use the draw method for cards
        for i in self.hand:
            card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(i.rank),
                       CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(i.suit))
            canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0] + 73 * self.hand.index(i), pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define deck class 
class Deck:
    def __init__(self):
        # create a Deck object
        self.deck = []
        for suit in SUITS:
            for rank in RANKS:
                self.deck.append(Card(str(suit), str(rank)))

    def shuffle(self):
        # shuffle the deck 
        random.shuffle(self.deck)

    def deal_card(self):
        # deal a card object from the deck
        self.card = self.deck[0]
        self.deck.remove(self.card)
        return self.card        
    
    #...added 
    def __str__(self):
        # return a string representing the deck
        print "[",
        for i in self.deck:
            print i,
        print "]"
        #print len(self.deck)

#define event handlers for buttons
def deal():
    global outcome, in_play, player_hand, dealer_hand, my_deck, score
    # your code goes here
    if in_play:
        score -= 1
        
    player_hand = Hand()
    dealer_hand = Hand()
    my_deck = Deck()
    my_deck.shuffle()
    
    player_hand.add_card(my_deck.deal_card())
    player_hand.add_card(my_deck.deal_card())
    dealer_hand.add_card(my_deck.deal_card())
    dealer_hand.add_card(my_deck.deal_card())
    outcome = 'Hit or stand?'    
    in_play = True

def hit():
    # replace with your code below
    # if the hand is in play, hit the player
    # if busted, assign a message to outcome, update in_play and score
    global outcome, score, in_play
    player_hand.add_card(my_deck.deal_card())
    if player_hand.get_value() > 21:
        outcome = "You have busted. New deal?"
        score -= 1
        in_play = False
        return score, outcome, in_play
    else:
        outcome = "Hit or stand?"    

        
def stand():
    # replace with your code below
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more
    # assign a message to outcome, update in_play and score
    global outcome, score, in_play
    in_play = False
    if player_hand.get_value() > 21:
        outcome = "You busted! New deal?"
        score -= 1
        return score, outcome, in_play
    else:
        while dealer_hand.get_value() < 17:
            dealer_hand.add_card(my_deck.deal_card())
        else:
            if dealer_hand.get_value() > 21:
                outcome = "Dealer busted! You won! New deal?"
                score += 1
                return score, outcome, in_play
            elif dealer_hand.get_value() >= player_hand.get_value():
                outcome = "Dealer wins! New deal?"
                score -= 1
                return score, outcome, in_play
            else:
                outcome = "You win. New deal?"
                score += 1
                return score, outcome, in_play             
    
# draw handler    
def draw(canvas):
    # test to make sure that card.draw works, replace with your code below
    #card = Card("S", "A")
    #card.draw(canvas, [300, 300])
    canvas.draw_text("BlackJack",[250,50],40,"Orange")
    canvas.draw_text("Score: "+str(score),[450,90],24,"turquoise")    
    canvas.draw_text(outcome,[50,90],24,"turquoise")    
    canvas.draw_text("Dealer", (60, 140), 20, "Black")
    canvas.draw_text("Player", (60, 340), 20, "Black")    
    dealer_hand.draw(canvas, [20, 150])    
    player_hand.draw(canvas, [20, 350])
    if in_play:
        canvas.draw_image(card_back, CARD_BACK_CENTER, CARD_BACK_SIZE, [20 + CARD_BACK_CENTER[0], 150 + CARD_BACK_CENTER[1]], CARD_SIZE)    


# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)


# get things rolling
deal()
frame.start()

# remember to review the gradic rubric
